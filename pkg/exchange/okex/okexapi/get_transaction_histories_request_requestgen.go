// Code generated by "requestgen -method GET -responseType .APIResponse -responseDataField Data -url /api/v5/trade/fills-history -type GetTransactionHistoriesRequest -responseDataType .OrderList"; DO NOT EDIT.

package okexapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"time"
)

func (g *GetTransactionHistoriesRequest) SetInstrumentType(InstrumentType InstrumentType) *GetTransactionHistoriesRequest {
	g.InstrumentType = InstrumentType
	return g
}

func (g *GetTransactionHistoriesRequest) SetInstrumentID(InstrumentID string) *GetTransactionHistoriesRequest {
	g.InstrumentID = &InstrumentID
	return g
}

func (g *GetTransactionHistoriesRequest) SetOrderType(OrderType OrderType) *GetTransactionHistoriesRequest {
	g.OrderType = &OrderType
	return g
}

func (g *GetTransactionHistoriesRequest) SetOrderID(OrderID string) *GetTransactionHistoriesRequest {
	g.OrderID = OrderID
	return g
}

func (g *GetTransactionHistoriesRequest) SetUnderlying(Underlying string) *GetTransactionHistoriesRequest {
	g.Underlying = &Underlying
	return g
}

func (g *GetTransactionHistoriesRequest) SetInstrumentFamily(InstrumentFamily string) *GetTransactionHistoriesRequest {
	g.InstrumentFamily = &InstrumentFamily
	return g
}

func (g *GetTransactionHistoriesRequest) After(after string) *GetTransactionHistoriesRequest {
	g.after = &after
	return g
}

func (g *GetTransactionHistoriesRequest) Before(before string) *GetTransactionHistoriesRequest {
	g.before = &before
	return g
}

func (g *GetTransactionHistoriesRequest) StartTime(startTime time.Time) *GetTransactionHistoriesRequest {
	g.startTime = &startTime
	return g
}

func (g *GetTransactionHistoriesRequest) EndTime(endTime time.Time) *GetTransactionHistoriesRequest {
	g.endTime = &endTime
	return g
}

func (g *GetTransactionHistoriesRequest) Limit(limit uint64) *GetTransactionHistoriesRequest {
	g.limit = &limit
	return g
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (g *GetTransactionHistoriesRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}
	// check InstrumentType field -> json key instType
	InstrumentType := g.InstrumentType

	// TEMPLATE check-valid-values
	switch InstrumentType {
	case InstrumentTypeSpot, InstrumentTypeSwap, InstrumentTypeFutures, InstrumentTypeOption, InstrumentTypeMARGIN:
		params["instType"] = InstrumentType

	default:
		return nil, fmt.Errorf("instType value %v is invalid", InstrumentType)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of InstrumentType
	params["instType"] = InstrumentType
	// check InstrumentID field -> json key instId
	if g.InstrumentID != nil {
		InstrumentID := *g.InstrumentID

		// assign parameter of InstrumentID
		params["instId"] = InstrumentID
	} else {
	}
	// check OrderType field -> json key ordType
	if g.OrderType != nil {
		OrderType := *g.OrderType

		// TEMPLATE check-valid-values
		switch OrderType {
		case OrderTypeMarket, OrderTypeLimit, OrderTypePostOnly, OrderTypeFOK, OrderTypeIOC:
			params["ordType"] = OrderType

		default:
			return nil, fmt.Errorf("ordType value %v is invalid", OrderType)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of OrderType
		params["ordType"] = OrderType
	} else {
	}
	// check OrderID field -> json key ordId
	OrderID := g.OrderID

	// assign parameter of OrderID
	params["ordId"] = OrderID
	// check Underlying field -> json key uly
	if g.Underlying != nil {
		Underlying := *g.Underlying

		// assign parameter of Underlying
		params["uly"] = Underlying
	} else {
	}
	// check InstrumentFamily field -> json key instFamily
	if g.InstrumentFamily != nil {
		InstrumentFamily := *g.InstrumentFamily

		// assign parameter of InstrumentFamily
		params["instFamily"] = InstrumentFamily
	} else {
	}
	// check after field -> json key after
	if g.after != nil {
		after := *g.after

		// assign parameter of after
		params["after"] = after
	} else {
	}
	// check before field -> json key before
	if g.before != nil {
		before := *g.before

		// assign parameter of before
		params["before"] = before
	} else {
	}
	// check startTime field -> json key begin
	if g.startTime != nil {
		startTime := *g.startTime

		// assign parameter of startTime
		// convert time.Time to milliseconds time stamp
		params["begin"] = strconv.FormatInt(startTime.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}
	// check endTime field -> json key end
	if g.endTime != nil {
		endTime := *g.endTime

		// assign parameter of endTime
		// convert time.Time to milliseconds time stamp
		params["end"] = strconv.FormatInt(endTime.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}
	// check limit field -> json key limit
	if g.limit != nil {
		limit := *g.limit

		// assign parameter of limit
		params["limit"] = limit
	} else {
	}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (g *GetTransactionHistoriesRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (g *GetTransactionHistoriesRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (g *GetTransactionHistoriesRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (g *GetTransactionHistoriesRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (g *GetTransactionHistoriesRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (g *GetTransactionHistoriesRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (g *GetTransactionHistoriesRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (g *GetTransactionHistoriesRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := g.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (g *GetTransactionHistoriesRequest) Do(ctx context.Context) (OrderList, error) {

	// no body params
	var params interface{}
	query, err := g.GetQueryParameters()
	if err != nil {
		return nil, err
	}

	apiURL := "/api/v5/trade/fills-history"

	req, err := g.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := g.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse APIResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	var data OrderList
	if err := json.Unmarshal(apiResponse.Data, &data); err != nil {
		return nil, err
	}
	return data, nil
}
